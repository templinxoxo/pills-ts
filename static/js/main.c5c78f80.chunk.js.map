{"version":3,"sources":["Pill.tsx","Pills.tsx","index.tsx"],"names":["initValue","headingMode","reducer","state","Pill","props","useReducer","dispatch","className","trim","breakLine","onClick","term","Pills","useState","terms","map","key","Object","assign","pills","setPills","pillsRef","useRef","updateComponent","current","clientWidth","currentLineSize","breakLineIndexes","Array","from","querySelectorAll","forEach","child","i","pillSize","buffer","margins","includes","scrollWidth","getPillSize","push","prevState","pill","updateComponentCallback","useCallback","useEffect","window","addEventListener","removeEventListener","ref","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gMAUMA,G,MAAY,CAChBC,aAAa,IAETC,EAAU,SAACC,GAAD,MAAmB,CAACF,aAAcE,EAAMF,cAkBzCG,EAfe,SAACC,GAAW,IAAD,EACbC,qBAAWJ,EAASF,GADP,mBAChCG,EADgC,KACzBI,EADyB,KAGjCC,EAAY,eAAQL,EAAMF,YAJZ,cAI0C,IAAKQ,OACnE,OACE,qCACGJ,EAAMK,UAAY,uBAAS,KAC5B,sBAAKF,UAAWA,EAAWG,QAAS,kBAAMJ,KAA1C,UACE,sBAAMC,UAAU,UAAhB,eACCH,EAAMO,YC6CAC,EAhDgB,SAACR,GAAW,IAAD,EACdS,oBAAoB,kBAC1CT,EAAMU,MAAMC,KAAI,SAACJ,EAAMK,GAAP,OAAeC,OAAOC,OAAO,CAAEP,OAAMK,cAFjB,mBACjCG,EADiC,KAC1BC,EAD0B,KAItCC,EAAWC,iBAAuB,MAE9BC,EAAkB,WAAO,IACrBC,EAAYH,EAAZG,QACR,GAAIA,EAAS,CAAC,IACJC,EAAyCD,EAAzCC,YACJC,EAAkB,EACpBC,EAA6B,GAE/BC,MAAMC,KAAKL,EAAQM,iBAAiB,UAAUC,SAAQ,SAACC,EAAOC,GAC5D,IAAMC,EApBQ,SAACF,GACrB,IACEG,EAASC,IADWJ,EAAMzB,UAAU8B,SAAS,eACY,EAJjD,IAKV,OAAOL,EAAMM,YAAcH,EAiBJI,CAAYP,IAC7BN,GAAmBQ,GAEGT,IACpBC,EAAkBQ,EAClBP,EAAiBa,KAAKP,OAG1Bb,GAAS,SAACqB,GACR,OAAOA,EAAU1B,KAAI,SAAC2B,GAEpB,OADAA,EAAKjC,UAAYkB,EAAiBU,SAASK,EAAK1B,KACzC0B,UAMTC,EAA0BC,sBAAYrB,EAAiB,IAQ7D,OAPAsB,qBAAU,WAGR,OAFAtB,IACAuB,OAAOC,iBAAiB,SAAUJ,GAC3B,kBAAMG,OAAOE,oBAAoB,SAAUL,MAEjD,IAGD,qBAAKM,IAAK5B,EAAV,SACGF,EAAMJ,KAAI,SAAC2B,GAAD,OACT,cAAC,EAAD,eAAUA,UCnDlBQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,CAAOtC,MAXG,CACZ,QACA,cACA,YACA,mBACA,YACA,mBAOAuC,SAASC,eAAe,W","file":"static/js/main.c5c78f80.chunk.js","sourcesContent":["import React, { useReducer } from \"react\";\nimport \"./Pill.css\";\n\ninterface Props {\n  term: string;\n  breakLine?: boolean;\n}\ninterface State {\n  headingMode: boolean;\n}\nconst initValue = {\n  headingMode: false\n} \nconst reducer = (state: State) => ({headingMode: !state.headingMode})\n\nconst HEADING_CLASS = \"headingMode\";\nconst Pill: React.FC<Props> = (props) => {\n  const [state, dispatch] = useReducer(reducer, initValue);\n  \n  const className = `pill ${state.headingMode ? HEADING_CLASS : \"\"}`.trim();\n  return (\n    <>\n      {props.breakLine ? <br /> : null}\n      <div className={className} onClick={() => dispatch()}>\n        <span className=\"heading\">H</span>\n        {props.term}\n      </div>\n    </>\n  );\n};\n\nexport default Pill;\n","import React, { useState, useRef, useEffect, useCallback } from \"react\";\nimport Pill from \"./Pill\";\n\ninterface Props {\n  terms: string[];\n}\ninterface PillObj {\n  term: string;\n  key: number;\n  breakLine?: boolean;\n}\n\nconst borders = 2, //pill border size\n  margins = 10, //pill margins size\n  heading = 20; //heading size\n\n  const getPillSize = (child: Element) => {\n  const isHeadingMode = child.className.includes(\"headingMode\"),\n    buffer = margins + borders + (!isHeadingMode ? heading : 0);\n  return child.scrollWidth + buffer;\n};\n\nconst Pills: React.FC<Props> = (props) => {\n  const [pills, setPills] = useState<PillObj[]>(() =>\n      props.terms.map((term, key) => Object.assign({ term, key }))\n    ),\n    pillsRef = useRef<HTMLDivElement>(null);\n\n  const updateComponent = () => {\n    const { current } = pillsRef;\n    if (current) {\n      const { clientWidth }: { clientWidth: number } = current;\n      let currentLineSize = 0,\n        breakLineIndexes: number[] = [];\n\n      Array.from(current.querySelectorAll(\".pill\")).forEach((child, i) => {\n        const pillSize = getPillSize(child);\n        currentLineSize += pillSize;\n\n        if (currentLineSize > clientWidth) {\n          currentLineSize = pillSize;\n          breakLineIndexes.push(i);\n        }\n      });\n      setPills((prevState) => {\n        return prevState.map((pill) => {\n          pill.breakLine = breakLineIndexes.includes(pill.key);\n          return pill;\n        });\n      });\n    }\n  };\n\n  const updateComponentCallback = useCallback(updateComponent, []);\n  useEffect(() => {\n    updateComponent();\n    window.addEventListener(\"resize\", updateComponentCallback);\n    return () => window.removeEventListener(\"resize\", updateComponentCallback);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <div ref={pillsRef}>\n      {pills.map((pill) => (\n        <Pill {...pill} />\n      ))}\n    </div>\n  );\n};\n\nexport default Pills;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Pills from \"./Pills\";\n\nconst terms = [\n  \"Lorem\",\n  \"Lorem ipsum\",\n  \"Dolor sit\",\n  \"Amet ipsum dolor\",\n  \"Sit lorem\",\n  \"Ipsum dolor\",\n];\n\nReactDOM.render(\n  <React.StrictMode>\n    <Pills terms={terms} />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}