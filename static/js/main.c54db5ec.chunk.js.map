{"version":3,"sources":["Pill.tsx","Pills.tsx","index.tsx"],"names":["Pill","props","useState","headingMode","setHeadingMode","className","trim","breakLine","onClick","prevMode","term","Pills","width","setWidth","terms","map","key","Object","assign","pills","setPills","pillsRef","useRef","updateWidth","current","clientWidth","useEffect","currentLineSize","breakLineIndexes","Array","from","querySelectorAll","forEach","child","i","buffer","margins","includes","pillSize","scrollWidth","push","prevState","pill","updateComponent","window","addEventListener","removeEventListener","ref","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gMA4BeA,G,MApBe,SAACC,GAC7B,IADuC,EAEDC,oBAAkB,kBAAM,KAFvB,mBAEhCC,EAFgC,KAEnBC,EAFmB,KAQjCC,EAAoB,eAAQF,EAPJ,cAOkC,IAAKG,OACrE,OACE,qCACGL,EAAMM,UAAY,uBAAS,KAC5B,sBAAKF,UAAWA,EAAWG,QART,WACpBJ,GAAe,SAACK,GAAD,OAAwBA,MAOrC,UACE,sBAAMJ,UAAU,UAAhB,eACCJ,EAAMS,aC2DAC,EAlEgB,SAACV,GAAW,IAAD,EACdC,oBAAiB,kBAAM,KADT,mBACjCU,EADiC,KAC1BC,EAD0B,OAElBX,oBAAoB,kBACtCD,EAAMa,MAAMC,KAAI,SAACL,EAAcM,GAAf,OACdC,OAAOC,OAAO,CAAER,OAAMM,cAJY,mBAErCG,EAFqC,KAE9BC,EAF8B,KAOtCC,EAAWC,iBAAuB,MAoC9BC,EAAc,WAAO,IACjBC,EAAwBH,EAAxBG,QACR,GAAIA,EAAS,CAAC,IACJC,EAAyCD,EAAzCC,YACRZ,EAASY,KAUb,OANAC,qBAAU,WAGR,OA7CsB,WAAO,IACrBF,EAAwBH,EAAxBG,QACR,GAAIA,EAAS,CACL,IAAEC,EAAyCD,EAAzCC,YAIJE,EAA0B,EAC5BC,EAA6B,GAE/BC,MAAMC,KAAKN,EAAQO,iBAAiB,UAAUC,SAC5C,SAACC,EAA2BC,GAC1B,IAGEC,EAAiBC,IAHYH,EAAM5B,UAAUgC,SAC3C,eAE+D,EATnD,IAUdC,EAAmBL,EAAMM,YAAcJ,GACzCR,GAAmBW,GAEGb,IACpBE,EAAkBW,EAClBV,EAAiBY,KAAKN,OAI5Bd,GAAS,SAACqB,GACR,OAAOA,EAAU1B,KAAI,SAAC2B,GAEpB,OADAA,EAAKnC,UAAYqB,EAAiBS,SAASK,EAAK1B,KACzC0B,SAebC,GACAC,OAAOC,iBAAiB,SAAUtB,GAC3B,kBAAMqB,OAAOE,oBAAoB,SAAUvB,MACjD,CAACX,IAGF,qBAAKmC,IAAK1B,EAAV,SACGF,EAAMJ,KAAI,SAAC2B,GAAD,OACT,cAAC,EAAD,eAAUA,UC9DlBM,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,CAAOpC,MAXa,CACtB,QACA,cACA,YACA,mBACA,YACA,mBAOAqC,SAASC,eAAe,W","file":"static/js/main.c54db5ec.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport \"./Pill.css\";\n\ninterface Props {\n  term: string;\n  breakLine?: boolean;\n}\n\nconst Pill: React.FC<Props> = (props) => {\n  const HEADING_CLASS: string = \"headingMode\";\n  const [headingMode, setHeadingMode] = useState<boolean>(() => false);\n\n  const toggleHeading = () => {\n    setHeadingMode((prevMode: boolean) => !prevMode);\n  };\n\n  const className: string = `pill ${headingMode ? HEADING_CLASS : \"\"}`.trim();\n  return (\n    <>\n      {props.breakLine ? <br /> : null}\n      <div className={className} onClick={toggleHeading}>\n        <span className=\"heading\">H</span>\n        {props.term}\n      </div>\n    </>\n  );\n};\n\nexport default Pill;\n","import React, { useState, useRef, useEffect } from \"react\";\nimport Pill from \"./Pill\";\n\ninterface Props {\n  terms: string[];\n}\ninterface PillObj {\n  term: string;\n  key: number;\n  breakLine?: boolean;\n}\ninterface DOMElement {\n  current: HTMLDivElement | null;\n}\n\nconst Pills: React.FC<Props> = (props) => {\n  const [width, setWidth] = useState<number>(() => 0),\n    [pills, setPills] = useState<PillObj[]>(() =>\n      props.terms.map((term: string, key: number) =>\n        Object.assign({ term, key })\n      )\n    ),\n    pillsRef = useRef<HTMLDivElement>(null);\n\n  const updateComponent = () => {\n    const { current }: DOMElement = pillsRef;\n    if (current) {\n      const { clientWidth }: { clientWidth: number } = current,\n        borders: number = 2, //pill border size\n        margins: number = 10, //pill margins size\n        heading: number = 20; //heading size\n      let currentLineSize: number = 0,\n        breakLineIndexes: number[] = [];\n\n      Array.from(current.querySelectorAll(\".pill\")).forEach(\n        (child: globalThis.Element, i: number) => {\n          const isHeadingMode: boolean = child.className.includes(\n              \"headingMode\"\n            ),\n            buffer: number = margins + borders + (!isHeadingMode ? heading : 0),\n            pillSize: number = child.scrollWidth + buffer;\n          currentLineSize += pillSize;\n\n          if (currentLineSize > clientWidth) {\n            currentLineSize = pillSize;\n            breakLineIndexes.push(i);\n          }\n        }\n      );\n      setPills((prevState: PillObj[]) => {\n        return prevState.map((pill: PillObj) => {\n          pill.breakLine = breakLineIndexes.includes(pill.key);\n          return pill;\n        });\n      });\n    }\n  };\n\n  const updateWidth = () => {\n    const { current }: DOMElement = pillsRef;\n    if (current) {\n      const { clientWidth }: { clientWidth: number } = current;\n      setWidth(clientWidth);\n    }\n  };\n\n  useEffect(() => {\n    updateComponent();\n    window.addEventListener(\"resize\", updateWidth);\n    return () => window.removeEventListener(\"resize\", updateWidth);\n  }, [width]);\n\n  return (\n    <div ref={pillsRef}>\n      {pills.map((pill) => (\n        <Pill {...pill} />\n      ))}\n    </div>\n  );\n};\n\nexport default Pills;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Pills from \"./Pills\";\n\nconst terms: string[] = [\n  \"Lorem\",\n  \"Lorem ipsum\",\n  \"Dolor sit\",\n  \"Amet ipsum dolor\",\n  \"Sit lorem\",\n  \"Ipsum dolor\",\n];\n\nReactDOM.render(\n  <React.StrictMode>\n    <Pills terms={terms} />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}